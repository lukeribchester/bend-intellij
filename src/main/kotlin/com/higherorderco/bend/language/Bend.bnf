{
  parserClass="com.higherorderco.bend.language.parser.BendParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Bend"
  psiImplClassSuffix="Impl"
  psiPackage="com.higherorderco.bend.language.psi"
  psiImplPackage="com.higherorderco.bend.language.psi.impl"

  elementTypeHolderClass="com.higherorderco.bend.language.psi.BendTypes"
  elementTypeClass="com.higherorderco.bend.language.psi.BendElementType"
  tokenTypeClass="com.higherorderco.bend.language.psi.BendTokenType"

  tokens = [
    /* Whitespace */
    CRLF="regexp:\R"
    WHITE_SPACE="regexp:[ \n\t\f]"
  ]
}

Book       ::= !<<eof>> (Data | Rule)*
Data       ::= "data" Name "=" ( Name | "(" Name (Name)* ")" )+
Rule       ::= ("(" Name Pattern* ")" | Name Pattern*) "=" Term
Pattern    ::= "(" Name Pattern* ")" | NameEra | Number | "(" Pattern ("," Pattern)+ ")"
Term       ::= Number | NumOp | Tup | App | Group | Nat | Lam | UnscopedLam | Bend | Fold |
               Use | Dup | LetTup | Let | Bind | Match | Switch | Era | UnscopedVar | Var
Lam        ::= Tag? ("λ"|"@") NameEra Term
UnscopedLam::= Tag? ("λ"|"@") "$" Name Term
NumOp      ::= "(" Operator Term Term ")"
Tup        ::= "(" Term ("," Term)+ ")"
App        ::= Tag? "(" Term (Term)+ ")"
Group      ::= "(" Term ")"
Use        ::= "use" Name "=" Term ";"? Term
Let        ::= "let" NameEra "=" Term ";"? Term
Bind       ::= "do" Name "{" Ask "}"
Ask        ::= "ask" Pattern "=" Term ";" Term | Term
LetTup     ::= "let" "(" NameEra ("," NameEra)+ ")" "=" Term ";"? Term
Dup        ::= "let" Tag? "{" NameEra (","? NameEra)+ "}" "=" Term ";"? Term
List       ::= "[" (Term ","?)* "]"
String     ::= "\"" (escape sequence | [^"])* "\""
Char       ::= "'" (escape sequence | [^']) "'"
Match      ::= "match" Name ("=" Term)? ("with" Var (","? Var)*)? "{" MatchArm+ "}"
MatchArm   ::= "|"? Pattern ":" Term ";"?
Switch     ::= "switch" Name ("=" Term)? ("with" Var (","? Var)*)? "{" SwitchArm+ "}"
SwitchArm  ::= "|"? (Num|"_") ":" Term ";"?
Var        ::= Name
UnscopedVar::= "$" Name
NameEra    ::= Name | "*"
Era        ::= "*"
Tag        ::= "#" Name
Name       ::= [_\-./a-zA-Z0-9]+
Number     ::= ([0-9]+ | "0x"[0-9a-fA-F]+ | "0b"[01]+)
Operator   ::= ( "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<<" | ">>" | "<=" | ">=" | "<" | ">" | "^" )
